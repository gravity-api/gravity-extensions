# set build name, this will be the package name
name: Gravity.Extensions.$(Year:yyyy).$(Month).$(DayOfMonth)$(Rev:.r)

trigger:
  branches:
    include:
    - master

# set agents pool (Default for local agent)
pool:
  name: Default

# set pipeline variables (groups are predefined on Azure DevOps)
variables:
- group: gravity.api
- name: 'Build.Configuration'
  value: 'Release'
- name: 'GitHub.Repository'
  value: 'gravity-api/gravity-extensions'

steps:
# dependencies restore
- task: DotNetCoreCLI@2
  displayName: restore dependencies
  inputs:
    command: 'restore'
    projects: '**/*.csproj'
    feedsToUse: 'select'
    vstsFeed: '6ed1caf9-de4f-48e8-8276-201533d86a19'
    verbosityRestore: 'Diagnostic'

# projects build (builds all projects under this path)
- task: DotNetCoreCLI@2
  displayName: build projects
  inputs:
    command: 'build'
    projects: '**/*.csproj'
    arguments: '--configuration $(buildConfiguration)'

# execute all unit testing in the path
# unit tests project must end with UnitTests suffix (not case sensitive)
- task: DotNetCoreCLI@2
  displayName: execute unit testing
  inputs:
    command: 'test'
    projects: '**/*[Uu]nit*[Tt]ests/*.csproj'
    arguments: '--configuration $(Build.Configuration)'
    testRunTitle: 'Unit Testing --- $(Build.BuildNumber)'

# execute all integration testing in the path
# integration tests project must end with IntegrationTests suffix (not case sensitive)
- task: DotNetCoreCLI@2
  displayName: execute integration testing
  inputs:
    command: 'test'
    projects: '**/*[Ii]ntegration*[Tt]ests/*.csproj'
    arguments: '--configuration $(Build.Configuration)'
    testRunTitle: 'Integration Testing --- $(Build.BuildNumber)'

- task: DotNetCoreCLI@2
  displayName: create package
  inputs:
    command: 'pack'
    packagesToPack: '**/!(*[Tt]ests)/*.csproj'
    versioningScheme: 'byBuildNumber'
    verbosityPack: 'Diagnostic'
    packDirectory: $(Build.ArtifactStagingDirectory)

- task: NuGetCommand@2
  displayName: push package
  inputs:
    command: 'push'
    packagesToPush: '$(Build.ArtifactStagingDirectory)/**/*.nupkg;!$(Build.ArtifactStagingDirectory)/**/*.symbols.nupkg'
    nuGetFeedType: 'external'
    publishFeedCredentials: 'nuget.org'

# extract build version from Build.BuildNumber parameter and pass it as Build.Version
- task: PowerShell@2
  displayName: 'parse build version for git-hub tag'
  inputs:
    targetType: 'inline'
    script: |
      # setup
      #
      [regex]$pattern = '(\d+.?)+'
      $version        = $pattern.Matches('$(Build.BuildNumber)') | foreach-object {$_.Value}      
      #
      # set value
      Write-Host "##vso[task.setvariable variable=Build.Version]$version"

# create a git-hub tag of this release
- task: GitHubRelease@1
  displayName: 'create git-hub tag'
  inputs:
    gitHubConnection: 'GitHub connection - Gravity API'
    repositoryName: '$(GitHub.Repository)'
    action: 'create'
    target: '$(Build.SourceVersion)'
    tagSource: 'userSpecifiedTag'
    tag: 'v$(Build.Version)'
    title: 'Production v$(Build.Version)'
    releaseNotesSource: 'inline'
    changeLogCompareToRelease: 'lastFullRelease'
    changeLogType: 'commitBased'